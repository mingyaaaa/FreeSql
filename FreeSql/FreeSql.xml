<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FreeSql</name>
    </assembly>
    <members>
        <member name="P:FreeSql.DataAnnotations.ColumnAttribute.Name">
            <summary>
            数据库列名
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.ColumnAttribute.OldName">
            <summary>
            指定数据库旧的列名，修改实体属性命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库字段；否则将视为【新增字段】
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.ColumnAttribute.DbType">
            <summary>
            数据库类型，如： varchar(255)
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.ColumnAttribute.IsPrimary">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.ColumnAttribute.IsIdentity">
            <summary>
            自增标识
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.ColumnAttribute.IsNullable">
            <summary>
            是否可DBNull
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.ColumnAttribute.IsIgnore">
            <summary>
            忽略此列，不迁移、不插入
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.ColumnAttribute.IsVersion">
            <summary>
            设置行锁（乐观锁）版本号，每次更新累加版本号，若更新整个实体时会附带当前的版本号判断（修改失败时抛出异常）
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.ColumnAttribute.Unique">
            <summary>
            唯一键，在多个属性指定相同的标识，代表联合键；可使用逗号分割多个 UniqueKey 名。
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.ColumnAttribute.DbDefautValue">
            <summary>
            数据库默认值
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.ColumnAttribute.MapType">
            <summary>
            类型映射，比如：可将 enum 属性映射成 typeof(string)
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.ColumnFluent.Name(System.String)">
            <summary>
            数据库列名
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.ColumnFluent.OldName(System.String)">
            <summary>
            指定数据库旧的列名，修改实体属性命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库字段；否则将视为【新增字段】
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.ColumnFluent.DbType(System.String)">
            <summary>
            数据库类型，如： varchar(255)
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.ColumnFluent.IsPrimary(System.Boolean)">
            <summary>
            主键
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.ColumnFluent.IsIdentity(System.Boolean)">
            <summary>
            自增标识
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.ColumnFluent.IsNullable(System.Boolean)">
            <summary>
            是否可DBNull
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.ColumnFluent.IsIgnore(System.Boolean)">
            <summary>
            忽略此列，不迁移、不插入
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.ColumnFluent.IsVersion(System.Boolean)">
            <summary>
            乐观锁
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.ColumnFluent.Unique(System.String)">
            <summary>
            唯一键，在多个属性指定相同的标识，代表联合键；可使用逗号分割多个 UniqueKey 名。
            </summary>
            <param name="value">标识</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.DataAnnotations.ColumnFluent.MapType(System.Type)">
            <summary>
            类型映射，比如：可将 enum 属性映射成 typeof(string)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:FreeSql.DataAnnotations.NavigateAttribute.Bind">
            <summary>
            手工绑定 OneToMany、ManyToOne 导航关系
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.NavigateAttribute.ManyToMany">
            <summary>
            手工绑定 ManyToMany 导航关系
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.OraclePrimaryKeyNameAttribute.Name">
            <summary>
            主键名
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.TableAttribute.Name">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.TableAttribute.OldName">
            <summary>
            指定数据库旧的表名，修改实体命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库表；否则将视为【创建新表】
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.TableAttribute.SelectFilter">
            <summary>
            查询过滤SQL，实现类似 a.IsDeleted = 1 功能
            </summary>
        </member>
        <member name="P:FreeSql.DataAnnotations.TableAttribute.DisableSyncStructure">
            <summary>
            禁用 CodeFirst 同步结构迁移
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.TableFluent.Name(System.String)">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.TableFluent.OldName(System.String)">
            <summary>
            指定数据库旧的表名，修改实体命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库表；否则将视为【创建新表】
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.TableFluent.SelectFilter(System.String)">
            <summary>
            查询过滤SQL，实现类似 a.IsDeleted = 1 功能
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.TableFluent.DisableSyncStructure(System.Boolean)">
            <summary>
            禁用 CodeFirst 同步结构迁移
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.TableFluent`1.Name(System.String)">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.TableFluent`1.OldName(System.String)">
            <summary>
            指定数据库旧的表名，修改实体命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库表；否则将视为【创建新表】
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.TableFluent`1.SelectFilter(System.String)">
            <summary>
            查询过滤SQL，实现类似 a.IsDeleted = 1 功能
            </summary>
        </member>
        <member name="M:FreeSql.DataAnnotations.TableFluent`1.DisableSyncStructure(System.Boolean)">
            <summary>
            禁用 CodeFirst 同步结构迁移
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbColumnInfo.Table">
            <summary>
            所属表
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbColumnInfo.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbColumnInfo.CsType">
            <summary>
            映射到 C# 类型
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbColumnInfo.DbType">
            <summary>
            数据库枚举类型int值
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbColumnInfo.DbTypeText">
            <summary>
            数据库类型，字符串，varchar
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbColumnInfo.DbTypeTextFull">
            <summary>
            数据库类型，字符串，varchar(255)
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbColumnInfo.MaxLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbColumnInfo.IsPrimary">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbColumnInfo.IsIdentity">
            <summary>
            自增标识
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbColumnInfo.IsNullable">
            <summary>
            是否可DBNull
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbColumnInfo.Coment">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbEnumInfo.Name">
            <summary>
            枚举类型标识
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbEnumInfo.Labels">
            <summary>
            枚举项
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbTableInfo.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbTableInfo.Schema">
            <summary>
            SqlServer下是Owner、PostgreSQL下是Schema、MySql下是数据库名
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbTableInfo.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbTableInfo.Comment">
            <summary>
            表备注，SqlServer下是扩展属性 MS_Description
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbTableInfo.Type">
            <summary>
            表/视图
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbTableInfo.Columns">
            <summary>
            列
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbTableInfo.Identitys">
            <summary>
            自增列
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbTableInfo.Primarys">
            <summary>
            主键/组合
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbTableInfo.UniquesDict">
            <summary>
            唯一键/组合
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbTableInfo.IndexesDict">
            <summary>
            索引/组合
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbTableInfo.ForeignsDict">
            <summary>
            外键
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbTypeInfo.Name">
            <summary>
            类型标识
            </summary>
        </member>
        <member name="P:FreeSql.DatabaseModel.DbTypeInfo.Labels">
            <summary>
            枚举项
            </summary>
        </member>
        <member name="M:FreeSql.Extensions.EntityUtil.EntityUtilExtensions.GetEntityKeyString(IFreeSql,System.Type,System.Object,System.Boolean,System.String)">
            <summary>
            获取实体的主键值，以 "*|_,[,_|*" 分割，当任意一个主键属性无值时，返回 null
            </summary>
            <param name="orm"></param>
            <param name="entityType"></param>
            <param name="entity"></param>
            <param name="genGuid">当Guid无值时，会生成有序的新值</param>
            <param name="splitString"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.Extensions.EntityUtil.EntityUtilExtensions.GetEntityKeyValues(IFreeSql,System.Type,System.Object)">
            <summary>
            获取实体的主键值，多个主键返回数组
            </summary>
            <param name="orm"></param>
            <param name="entityType"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.Extensions.EntityUtil.EntityUtilExtensions.GetEntityValueWithPropertyName(IFreeSql,System.Type,System.Object,System.String)">
            <summary>
            获取实体的属性值
            </summary>
            <param name="orm"></param>
            <param name="entityType"></param>
            <param name="entity"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.Extensions.EntityUtil.EntityUtilExtensions.GetEntityString(IFreeSql,System.Type,System.Object)">
            <summary>
            获取实体的所有数据，以 (1, 2, xxx) 的形式
            </summary>
            <param name="orm"></param>
            <param name="entityType"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="F:FreeSql.Extensions.EntityUtil.EntityUtilExtensions._dicMapEntityValue">
            <summary>
            使用新实体的值，复盖旧实体的值
            </summary>
        </member>
        <member name="M:FreeSql.Extensions.EntityUtil.EntityUtilExtensions.MapEntityKeyValue(IFreeSql,System.Type,System.Object,System.Object)">
            <summary>
            使用新实体的主键值，复盖旧实体的主键值
            </summary>
        </member>
        <member name="M:FreeSql.Extensions.EntityUtil.EntityUtilExtensions.SetEntityIdentityValueWithPrimary(IFreeSql,System.Type,System.Object,System.Int64)">
            <summary>
            设置实体中主键内的自增字段值（若存在）
            </summary>
            <param name="orm"></param>
            <param name="entityType"></param>
            <param name="entity"></param>
            <param name="idtval"></param>
        </member>
        <member name="M:FreeSql.Extensions.EntityUtil.EntityUtilExtensions.GetEntityIdentityValueWithPrimary(IFreeSql,System.Type,System.Object)">
            <summary>
            获取实体中主键内的自增字段值（若存在）
            </summary>
            <param name="orm"></param>
            <param name="entityType"></param>
            <param name="entity"></param>
        </member>
        <member name="M:FreeSql.Extensions.EntityUtil.EntityUtilExtensions.ClearEntityPrimaryValueWithIdentityAndGuid(IFreeSql,System.Type,System.Object)">
            <summary>
            清除实体的主键值，将自增、Guid类型的主键值清除
            </summary>
            <param name="orm"></param>
            <param name="entityType"></param>
            <param name="entity"></param>
        </member>
        <member name="M:FreeSql.Extensions.EntityUtil.EntityUtilExtensions.ClearEntityPrimaryValueWithIdentity(IFreeSql,System.Type,System.Object)">
            <summary>
            清除实体的主键值，将自增、Guid类型的主键值清除
            </summary>
            <param name="orm"></param>
            <param name="entityType"></param>
            <param name="entity"></param>
        </member>
        <member name="M:FreeSql.Extensions.EntityUtil.EntityUtilExtensions.CompareEntityValueReturnColumns(IFreeSql,System.Type,System.Object,System.Object,System.Boolean)">
            <summary>
            对比两个实体值，返回相同/或不相同的列名
            </summary>
            <param name="orm"></param>
            <param name="entityType"></param>
            <param name="entity1"></param>
            <param name="entity2"></param>
            <param name="isEqual"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.Extensions.EntityUtil.EntityUtilExtensions.SetEntityIncrByWithPropertyName(IFreeSql,System.Type,System.Object,System.String,System.Int32)">
            <summary>
            设置实体中某属性的数值增加指定的值
            </summary>
            <param name="orm"></param>
            <param name="entityType"></param>
            <param name="entity"></param>
            <param name="propertyName"></param>
            <param name="incrBy"></param>
        </member>
        <member name="M:FreeSql.Extensions.EntityUtil.EntityUtilExtensions.SetEntityValueWithPropertyName(IFreeSql,System.Type,System.Object,System.String,System.Object)">
            <summary>
            设置实体中某属性的值
            </summary>
            <param name="orm"></param>
            <param name="entityType"></param>
            <param name="entity"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:FreeSql.Extensions.EntityUtil.EntityUtilExtensions.AppendEntityUpdateSetWithColumn``1(FreeSql.IUpdate{``0},System.Type,System.Linq.Expressions.LambdaExpression)">
            <summary>
            缓存执行 IUpdate.Set
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="update"></param>
            <param name="columnType"></param>
            <param name="setExp"></param>
        </member>
        <member name="M:FreeSql.FreeSqlBuilder.UseConnectionString(FreeSql.DataType,System.String)">
            <summary>
            使用连接串
            </summary>
            <param name="dataType">数据库类型</param>
            <param name="connectionString">数据库连接串</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.FreeSqlBuilder.UseSlave(System.String[])">
            <summary>
            使用从数据库，支持多个
            </summary>
            <param name="slaveConnectionString">从数据库连接串</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.FreeSqlBuilder.UseAutoSyncStructure(System.Boolean)">
            <summary>
            【开发环境必备】自动同步实体结构到数据库，程序运行中检查实体表是否存在，然后创建或修改
            </summary>
            <param name="value">true:运行时检查自动同步结构, false:不同步结构</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.FreeSqlBuilder.UseSyncStructureToLower(System.Boolean)">
            <summary>
            转小写同步结构
            </summary>
            <param name="value">true:转小写, false:不转</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.FreeSqlBuilder.UseSyncStructureToUpper(System.Boolean)">
            <summary>
            转大写同步结构
            </summary>
            <param name="value">true:转大写, false:不转</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.FreeSqlBuilder.UseConfigEntityFromDbFirst(System.Boolean)">
            <summary>
            使用数据库的主键和自增，适用 DbFirst 模式，无须在实体类型上设置 [Column(IsPrimary)] 或者 ConfigEntity。此功能目前可用于 mysql/sqlserver/postgresql。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.FreeSqlBuilder.UseNoneCommandParameter(System.Boolean)">
            <summary>
            不使用命令参数化执行，针对 Insert/Update，也可临时使用 IInsert/IUpdate.NoneParameter() 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.FreeSqlBuilder.UseLazyLoading(System.Boolean)">
            <summary>
            延时加载导航属性对象，导航属性需要声明 virtual
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.FreeSqlBuilder.UseMonitorCommand(System.Action{System.Data.Common.DbCommand},System.Action{System.Data.Common.DbCommand,System.String})">
            <summary>
            监视数据库命令对象
            </summary>
            <param name="executing">执行前</param>
            <param name="executed">执行后，可监视执行性能</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.FreeSqlBuilder.UseEntityPropertyNameConvert(FreeSql.Internal.StringConvertType)">
            <summary>
            自动转换实体属性名称 Entity Property -> Db Filed
            <para></para>
            *不会覆盖 [Column] 特性设置的Name
            </summary>
            <param name="convertType"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDelete`1.WithTransaction(System.Data.Common.DbTransaction)">
            <summary>
            指定事务对象
            </summary>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDelete`1.WithConnection(System.Data.Common.DbConnection)">
            <summary>
            指定事务对象
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDelete`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            lambda表达式条件，仅支持实体基础成员（不包含导航对象）
            </summary>
            <param name="exp">lambda表达式条件</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDelete`1.Where(System.String,System.Object)">
            <summary>
            原生sql语法条件，Where("id = ?id", new { id = 1 })
            </summary>
            <param name="sql">sql语法条件</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDelete`1.Where(`0)">
            <summary>
            传入实体，将主键作为条件
            </summary>
            <param name="item">实体</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDelete`1.Where(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            传入实体集合，将主键作为条件
            </summary>
            <param name="items">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDelete`1.WhereExists``1(FreeSql.ISelect{``0},System.Boolean)">
            <summary>
            子查询是否存在
            </summary>
            <typeparam name="TEntity2"></typeparam>
            <param name="select">子查询</param>
            <param name="notExists">不存在</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDelete`1.WhereDynamic(System.Object)">
            <summary>
            传入动态对象如：主键值 | new[]{主键值1,主键值2} | TEntity1 | new[]{TEntity1,TEntity2} | new{id=1}
            </summary>
            <param name="dywhere">主键值、主键值集合、实体、实体集合、匿名对象、匿名对象集合</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDelete`1.AsTable(System.Func{System.String,System.String})">
            <summary>
            设置表名规则，可用于分库/分表，参数1：默认表名；返回值：新表名；
            </summary>
            <param name="tableRule"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDelete`1.AsType(System.Type)">
            <summary>
            动态Type，在使用 Delete&lt;object&gt; 后使用本方法，指定实体类型
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDelete`1.ToSql">
            <summary>
            返回即将执行的SQL语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDelete`1.ExecuteAffrows">
            <summary>
            执行SQL语句，返回影响的行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDelete`1.ExecuteDeleted">
            <summary>
            执行SQL语句，返回被删除的记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.WithTransaction(System.Data.Common.DbTransaction)">
            <summary>
            指定事务对象
            </summary>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.WithConnection(System.Data.Common.DbConnection)">
            <summary>
            指定事务对象
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.AppendData(`0)">
            <summary>
            追加准备插入的实体
            </summary>
            <param name="source">实体</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.AppendData(`0[])">
            <summary>
            追加准备插入的实体
            </summary>
            <param name="source">实体</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.AppendData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            追加准备插入的实体集合
            </summary>
            <param name="source">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.InsertColumns(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            只插入的列，InsertColumns(a => a.Name) | InsertColumns(a => new{a.Name,a.Time}) | InsertColumns(a => new[]{"name","time"})
            </summary>
            <param name="columns">lambda选择列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.IgnoreColumns(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            忽略的列，IgnoreColumns(a => a.Name) | IgnoreColumns(a => new{a.Name,a.Time}) | IgnoreColumns(a => new[]{"name","time"})
            </summary>
            <param name="columns">lambda选择列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.InsertIdentity">
            <summary>
            指定可插入自增字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.NoneParameter">
            <summary>
            不使用参数化，可通过 IFreeSql.CodeFirst.IsNotCommandParameter 全局性设置
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.AsTable(System.Func{System.String,System.String})">
            <summary>
            设置表名规则，可用于分库/分表，参数1：默认表名；返回值：新表名；
            </summary>
            <param name="tableRule"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.AsType(System.Type)">
            <summary>
            动态Type，在使用 Insert&lt;object&gt; 后使用本方法，指定实体类型
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.ToSql">
            <summary>
            返回即将执行的SQL语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.ExecuteAffrows">
            <summary>
            执行SQL语句，返回影响的行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.ExecuteIdentity">
            <summary>
            执行SQL语句，返回自增值
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IInsert`1.ExecuteInserted">
            <summary>
            执行SQL语句，返回插入后的记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ILinqToSql`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            【linq to sql】专用方法，不建议直接使用
            </summary>
        </member>
        <member name="M:FreeSql.ILinqToSql`1.Join``3(FreeSql.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{`0,``0,``2}})">
            <summary>
            【linq to sql】专用方法，不建议直接使用
            </summary>
        </member>
        <member name="M:FreeSql.ILinqToSql`1.GroupJoin``3(FreeSql.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{`0,FreeSql.ISelect{``0},``2}})">
            <summary>
            【linq to sql】专用方法，不建议直接使用
            </summary>
        </member>
        <member name="M:FreeSql.ILinqToSql`1.DefaultIfEmpty">
            <summary>
            【linq to sql】专用方法，不建议直接使用
            </summary>
        </member>
        <member name="M:FreeSql.ILinqToSql`1.SelectMany``2(System.Linq.Expressions.Expression{System.Func{`0,FreeSql.ISelect{``0}}},System.Linq.Expressions.Expression{System.Func{`0,``0,``1}})">
            <summary>
            【linq to sql】专用方法，不建议直接使用
            </summary>
        </member>
        <member name="M:FreeSql.ISelect0`2.WithTransaction(System.Data.Common.DbTransaction)">
            <summary>
            指定事务对象
            </summary>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.WithConnection(System.Data.Common.DbConnection)">
            <summary>
            指定连接对象
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.TrackToList(System.Action{System.Object})">
            <summary>
            审核或跟踪 ToList 即将返回的数据
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.ToDataTable(System.String)">
            <summary>
            执行SQL查询，返回 DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.ToList(System.Boolean)">
            <summary>
            执行SQL查询，返回 T1 实体所有字段的记录，记录不存在时返回 Count 为 0 的列表
            </summary>
            <param name="includeNestedMembers">false: 返回 2级 LeftJoin/InnerJoin/RightJoin 对象；true: 返回所有 LeftJoin/InnerJoin/RightJoin 的导航数据</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.ToList``1(System.String)">
            <summary>
            执行SQL查询，返回 field 指定字段的记录，并以元组或基础类型(int,string,long)接收，记录不存在时返回 Count 为 0 的列表
            </summary>
            <typeparam name="TTuple"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.ToOne">
            <summary>
            执行SQL查询，返回 T1 实体所有字段的第一条记录，记录不存在时返回 null
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.First">
            <summary>
            执行SQL查询，返回 T1 实体所有字段的第一条记录，记录不存在时返回 null
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.AsTable(System.Func{System.Type,System.String,System.String})">
            <summary>
            设置表名规则，可用于分库/分表，参数1：实体类型；参数2：默认表名；返回值：新表名；
            </summary>
            <param name="tableRule"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.AsType(System.Type)">
            <summary>
            动态Type，在使用 Select&lt;object&gt; 后使用本方法，指定实体类型
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.ToSql(System.String)">
            <summary>
            返回即将执行的SQL语句
            </summary>
            <param name="field">指定字段</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.Any">
            <summary>
            执行SQL查询，是否有记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.Count">
            <summary>
            查询的记录数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.Count(System.Int64@)">
            <summary>
            查询的记录数量，以参数out形式返回
            </summary>
            <param name="count">返回的变量</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.Master">
            <summary>
            指定从主库查询（默认查询从库）
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.LeftJoin(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            左联查询，使用导航属性自动生成SQL
            </summary>
            <param name="exp">表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.InnerJoin(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            联接查询，使用导航属性自动生成SQL
            </summary>
            <param name="exp">表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.RightJoin(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            右联查询，使用导航属性自动生成SQL
            </summary>
            <param name="exp">表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`1,``0,System.Boolean}})">
            <summary>
            左联查询，指定关联的实体类型
            </summary>
            <typeparam name="T2">关联的实体类型</typeparam>
            <param name="exp">表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.InnerJoin``1(System.Linq.Expressions.Expression{System.Func{`1,``0,System.Boolean}})">
            <summary>
            联接查询，指定关联的实体类型
            </summary>
            <typeparam name="T2">关联的实体类型</typeparam>
            <param name="exp">表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`1,``0,System.Boolean}})">
            <summary>
            右联查询，指定关联的实体类型
            </summary>
            <typeparam name="T2">关联的实体类型</typeparam>
            <param name="exp">表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.LeftJoin(System.String,System.Object)">
            <summary>
            左联查询，使用原生sql语法，LeftJoin("type b on b.id = a.id and b.clicks > ?clicks", new { clicks = 1 })
            </summary>
            <param name="sql">sql语法条件</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.InnerJoin(System.String,System.Object)">
            <summary>
            联接查询，使用原生sql语法，InnerJoin("type b on b.id = a.id and b.clicks > ?clicks", new { clicks = 1 })
            </summary>
            <param name="sql">sql语法条件</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.RightJoin(System.String,System.Object)">
            <summary>
            右联查询，使用原生sql语法，RightJoin("type b on b.id = a.id and b.clicks > ?clicks", new { clicks = 1 })
            </summary>
            <param name="sql">sql语法条件</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.Where(System.String,System.Object)">
            <summary>
            原生sql语法条件，Where("id = ?id", new { id = 1 })
            </summary>
            <param name="sql">sql语法条件</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.WhereIf(System.Boolean,System.String,System.Object)">
            <summary>
            原生sql语法条件，WhereIf(true, "id = ?id", new { id = 1 })
            </summary>
            <param name="condition">true 时生效</param>
            <param name="sql">sql语法条件</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.GroupBy(System.String,System.Object)">
            <summary>
            按原生sql语法分组，GroupBy("concat(name, ?cc)", new { cc = 1 })
            </summary>
            <param name="sql">sql语法</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.Having(System.String,System.Object)">
            <summary>
            按原生sql语法聚合条件过滤，Having("count(name) = ?cc", new { cc = 1 })
            </summary>
            <param name="sql">sql语法条件</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.OrderBy(System.String,System.Object)">
            <summary>
            按原生sql语法排序，OrderBy("count(name) + ?cc desc", new { cc = 1 })
            </summary>
            <param name="sql">sql语法</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.OrderBy(System.Boolean,System.String,System.Object)">
            <summary>
            按原生sql语法排序，OrderBy(true, "count(name) + ?cc desc", new { cc = 1 })
            </summary>
            <param name="condition">true 时生效</param>
            <param name="sql">sql语法</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.Skip(System.Int32)">
            <summary>
            查询向后偏移行数
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.Offset(System.Int32)">
            <summary>
            查询向后偏移行数
            </summary>
            <param name="offset">行数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.Limit(System.Int32)">
            <summary>
            查询多少条数据
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.Take(System.Int32)">
            <summary>
            查询多少条数据
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.Page(System.Int32,System.Int32)">
            <summary>
            分页
            </summary>
            <param name="pageNumber">第几页</param>
            <param name="pageSize">每页多少</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect0`2.Distinct">
            <summary>
            查询数据前，去重
            <para>
            .Distinct().ToList(x => x.GroupName) 对指定字段去重
            </para>
            <para>
            .Distinct().ToList() 对整个查询去重
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            执行SQL查询，是否有记录
            </summary>
            <param name="exp">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.ToDataTable``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            执行SQL查询，返回 DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.ToList``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            执行SQL查询，返回指定字段的记录，记录不存在时返回 Count 为 0 的列表
            </summary>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="select">选择列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.ToList``1">
            <summary>
            执行SQL查询，返回 TDto 映射的字段，记录不存在时返回 Count 为 0 的列表
            </summary>
            <typeparam name="TDto"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.ToOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            执行SQL查询，返回指定字段的记录的第一条记录，记录不存在时返回 TReturn 默认值
            </summary>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="select">选择列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.First``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            执行SQL查询，返回指定字段的记录的第一条记录，记录不存在时返回 TReturn 默认值
            </summary>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="select">选择列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.ToSql``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            返回即将执行的SQL语句
            </summary>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="select">选择列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.ToAggregate``1(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectGroupingAggregate{`0},``0}})">
            <summary>
            执行SQL查询，返回指定字段的聚合结果
            </summary>
            <typeparam name="TReturn"></typeparam>
            <param name="select"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            求和
            </summary>
            <typeparam name="TMember">返回类型</typeparam>
            <param name="column">列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            最小值
            </summary>
            <typeparam name="TMember">返回类型</typeparam>
            <param name="column">列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            最大值
            </summary>
            <typeparam name="TMember">返回类型</typeparam>
            <param name="column">列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.Avg``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            平均值
            </summary>
            <typeparam name="TMember">返回类型</typeparam>
            <param name="column">列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.As(System.String)">
            <summary>
            指定别名
            </summary>
            <param name="alias">别名</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.From``1(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectFromExpression{`0},``0,FreeSql.ISelectFromExpression{`0}}})">
            <summary>
            多表查询
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.From``2(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectFromExpression{`0},``0,``1,FreeSql.ISelectFromExpression{`0}}})">
            <summary>
            多表查询
            </summary>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.From``3(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectFromExpression{`0},``0,``1,``2,FreeSql.ISelectFromExpression{`0}}})">
            <summary>
            多表查询
            </summary>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.From``4(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectFromExpression{`0},``0,``1,``2,``3,FreeSql.ISelectFromExpression{`0}}})">
            <summary>
            多表查询
            </summary>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.From``5(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectFromExpression{`0},``0,``1,``2,``3,``4,FreeSql.ISelectFromExpression{`0}}})">
            <summary>
            多表查询
            </summary>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.From``6(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectFromExpression{`0},``0,``1,``2,``3,``4,``5,FreeSql.ISelectFromExpression{`0}}})">
            <summary>
            多表查询
            </summary>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.From``7(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectFromExpression{`0},``0,``1,``2,``3,``4,``5,``6,FreeSql.ISelectFromExpression{`0}}})">
            <summary>
            多表查询
            </summary>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.From``8(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectFromExpression{`0},``0,``1,``2,``3,``4,``5,``6,``7,FreeSql.ISelectFromExpression{`0}}})">
            <summary>
            多表查询
            </summary>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.From``9(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectFromExpression{`0},``0,``1,``2,``3,``4,``5,``6,``7,``8,FreeSql.ISelectFromExpression{`0}}})">
            <summary>
            多表查询
            </summary>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <typeparam name="T10"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询条件，Where(a => a.Id > 10)，支持导航对象查询，Where(a => a.Author.Email == "2881099@qq.com")
            </summary>
            <param name="exp">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.WhereIf(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询条件，Where(true, a => a.Id > 10)，支导航对象查询，Where(true, a => a.Author.Email == "2881099@qq.com")
            </summary>
            <param name="condition">true 时生效</param>
            <param name="exp">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.Where``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            多表条件查询
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="exp">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            多表条件查询
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="exp">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.Where``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Boolean}})">
            <summary>
            多表条件查询
            </summary>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="exp">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.Where``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,System.Boolean}})">
            <summary>
            多表条件查询
            </summary>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="exp">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.Where``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3,System.Boolean}})">
            <summary>
            多表条件查询
            </summary>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="exp">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.WhereDynamic(System.Object)">
            <summary>
            传入动态对象如：主键值 | new[]{主键值1,主键值2} | TEntity1 | new[]{TEntity1,TEntity2} | new{id=1}
            </summary>
            <param name="dywhere">主键值、主键值集合、实体、实体集合、匿名对象、匿名对象集合</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.WhereCascade(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            多表查询时，该方法标记后，表达式条件将对所有表进行附加
            <para></para>
            例如：软删除、租户，每个表都给条件，挺麻烦的
            <para></para>
            fsql.Select&lt;T1&gt;().LeftJoin&lt;T2&gt;(...).Where&lt;T2&gt;((t1, t2 => t1.IsDeleted == false &amp;&amp; t2.IsDeleted == false)
            <para></para>
            修改：fsql.Select&lt;T1&gt;().LeftJoin&lt;T2&gt;(...).WhereCascade(t1 => t1.IsDeleted == false)
            <para></para>
            当其中的实体可附加表达式才会进行，表越多时收益越大
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            按选择的列分组，GroupBy(a => a.Name) | GroupBy(a => new{a.Name,a.Time})
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            按列排序，OrderBy(a => a.Time)
            </summary>
            <typeparam name="TMember"></typeparam>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.OrderBy``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            按列排序，OrderBy(true, a => a.Time)
            </summary>
            <typeparam name="TMember"></typeparam>
            <param name="condition">true 时生效</param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            按列倒向排序，OrderByDescending(a => a.Time)
            </summary>
            <param name="column">列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.OrderByDescending``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            按列倒向排序，OrderByDescending(true, a => a.Time)
            </summary>
            <param name="condition">true 时生效</param>
            <param name="column">列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            贪婪加载导航属性，如果查询中已经使用了 a.Parent.Parent 类似表达式，则可以无需此操作
            </summary>
            <typeparam name="TNavigate"></typeparam>
            <param name="navigateSelector">选择一个导航属性</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelect`1.IncludeMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Action{FreeSql.ISelect{``0}})">
            <summary>
            贪婪加载集合的导航属性，其实是分两次查询，ToList 后进行了数据重装
            </summary>
            <typeparam name="TNavigate"></typeparam>
            <param name="navigateSelector">选择一个集合的导航属性，也可通过 .Where 设置临时的关系映射，还可以 .Take(5) 每个子集合只取5条</param>
            <param name="then">即能 ThenInclude，还可以二次过滤（这个 EFCore 做不到？）</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectFromExpression`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询条件，Where(a => a.Id > 10)，支持导航对象查询，Where(a => a.Author.Email == "2881099@qq.com")
            </summary>
            <param name="exp">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectFromExpression`1.WhereIf(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询条件，Where(true, a => a.Id > 10)，支导航对象查询，Where(true, a => a.Author.Email == "2881099@qq.com")
            </summary>
            <param name="condition">true 时生效</param>
            <param name="exp">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectFromExpression`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            按列排序，OrderBy(a => a.Time)
            </summary>
            <typeparam name="TMember"></typeparam>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectFromExpression`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            按列倒向排序，OrderByDescending(a => a.Time)
            </summary>
            <param name="column">列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGrouping`2.Having(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectGroupingAggregate{`0,`1},System.Boolean}})">
            <summary>
            按聚合条件过滤，Where(a => a.Count() > 10)
            </summary>
            <param name="exp">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGrouping`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectGroupingAggregate{`0,`1},``0}})">
            <summary>
            按列排序，OrderBy(a => a.Time)
            </summary>
            <typeparam name="TMember"></typeparam>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGrouping`2.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectGroupingAggregate{`0,`1},``0}})">
            <summary>
            按列倒向排序，OrderByDescending(a => a.Time)
            </summary>
            <param name="column">列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGrouping`2.ToList``1(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectGroupingAggregate{`0,`1},``0}})">
            <summary>
            执行SQL查询，返回指定字段的记录，记录不存在时返回 Count 为 0 的列表
            </summary>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="select">选择列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGrouping`2.Select``1(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectGroupingAggregate{`0,`1},``0}})">
            <summary>
            【linq to sql】专用方法，不建议直接使用
            </summary>
        </member>
        <member name="M:FreeSql.ISelectGrouping`2.ToSql``1(System.Linq.Expressions.Expression{System.Func{FreeSql.ISelectGroupingAggregate{`0,`1},``0}})">
            <summary>
            返回即将执行的SQL语句
            </summary>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="select">选择列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGrouping`2.ToSql(System.String)">
            <summary>
            返回即将执行的SQL语句
            </summary>
            <param name="field">指定字段</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGrouping`2.Skip(System.Int32)">
            <summary>
            查询向后偏移行数
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGrouping`2.Offset(System.Int32)">
            <summary>
            查询向后偏移行数
            </summary>
            <param name="offset">行数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGrouping`2.Limit(System.Int32)">
            <summary>
            查询多少条数据
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGrouping`2.Take(System.Int32)">
            <summary>
            查询多少条数据
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGrouping`2.Page(System.Int32,System.Int32)">
            <summary>
            分页
            </summary>
            <param name="pageNumber">第几页</param>
            <param name="pageSize">每页多少</param>
            <returns></returns>
        </member>
        <member name="P:FreeSql.ISelectGroupingAggregate`1.Key">
            <summary>
            分组的数据
            </summary>
        </member>
        <member name="M:FreeSql.ISelectGroupingAggregate`1.Count">
            <summary>
            记录总数
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGroupingAggregate`1.Sum``1(``0)">
            <summary>
            求和
            </summary>
            <typeparam name="T3"></typeparam>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGroupingAggregate`1.Avg``1(``0)">
            <summary>
            平均值
            </summary>
            <typeparam name="T3"></typeparam>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGroupingAggregate`1.Max``1(``0)">
            <summary>
            最大值
            </summary>
            <typeparam name="T3"></typeparam>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ISelectGroupingAggregate`1.Min``1(``0)">
            <summary>
            最小值
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:FreeSql.ISelectGroupingAggregate`2.Value">
            <summary>
            所有元素
            </summary>
        </member>
        <member name="M:FreeSql.IUpdate`1.WithTransaction(System.Data.Common.DbTransaction)">
            <summary>
            指定事务对象
            </summary>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.WithConnection(System.Data.Common.DbConnection)">
            <summary>
            指定事务对象
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.NoneParameter">
            <summary>
            不使用参数化，可通过 IFreeSql.CodeFirst.IsNotCommandParameter 全局性设置
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.SetSource(`0)">
            <summary>
            更新数据，设置更新的实体
            </summary>
            <param name="source">实体</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.SetSource(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新数据，设置更新的实体集合
            </summary>
            <param name="source">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.IgnoreColumns(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            忽略的列，IgnoreColumns(a => a.Name) | IgnoreColumns(a => new{a.Name,a.Time}) | IgnoreColumns(a => new[]{"name","time"})
            </summary>
            <param name="columns">lambda选择列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.IgnoreColumns(System.String[])">
            <summary>
            忽略的列
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.UpdateColumns(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            指定的列，UpdateColumns(a => a.Name) | UpdateColumns(a => new{a.Name,a.Time}) | UpdateColumns(a => new[]{"name","time"})
            </summary>
            <param name="columns">lambda选择列</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.UpdateColumns(System.String[])">
            <summary>
            指定的列
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            设置列的新值，Set(a => a.Name, "newvalue")
            </summary>
            <typeparam name="TMember"></typeparam>
            <param name="column">lambda选择列</param>
            <param name="value">新值</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置列的的新值为基础上增加，格式：Set(a => a.Clicks + 1) 相当于 clicks=clicks+1
            <para></para>
            指定更新，格式：Set(a => new T { Clicks = a.Clicks + 1, Time = DateTime.Now }) 相当于 set clicks=clicks+1,time='2019-06-19....'
            </summary>
            <typeparam name="TMember"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.SetRaw(System.String,System.Object)">
            <summary>
            设置值，自定义SQL语法，SetRaw("title = ?title", new { title = "newtitle" })
            </summary>
            <param name="sql">sql语法</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            lambda表达式条件，仅支持实体基础成员（不包含导航对象）
            </summary>
            <param name="exp">lambda表达式条件</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.Where(System.String,System.Object)">
            <summary>
            原生sql语法条件，Where("id = ?id", new { id = 1 })
            </summary>
            <param name="sql">sql语法条件</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.Where(`0)">
            <summary>
            传入实体，将主键作为条件
            </summary>
            <param name="item">实体</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.Where(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            传入实体集合，将主键作为条件
            </summary>
            <param name="items">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.WhereExists``1(FreeSql.ISelect{``0},System.Boolean)">
            <summary>
            子查询是否存在
            </summary>
            <typeparam name="TEntity2"></typeparam>
            <param name="select">子查询</param>
            <param name="notExists">不存在</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.WhereDynamic(System.Object)">
            <summary>
            传入动态对象如：主键值 | new[]{主键值1,主键值2} | TEntity1 | new[]{TEntity1,TEntity2} | new{id=1}
            </summary>
            <param name="dywhere">主键值、主键值集合、实体、实体集合、匿名对象、匿名对象集合</param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.AsTable(System.Func{System.String,System.String})">
            <summary>
            设置表名规则，可用于分库/分表，参数1：默认表名；返回值：新表名；
            </summary>
            <param name="tableRule"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.AsType(System.Type)">
            <summary>
            动态Type，在使用 Update&lt;object&gt; 后使用本方法，指定实体类型
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.ToSql">
            <summary>
            返回即将执行的SQL语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.ExecuteAffrows">
            <summary>
            执行SQL语句，返回影响的行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IUpdate`1.ExecuteUpdated">
            <summary>
            执行SQL语句，返回更新后的记录
            </summary>
            <returns></returns>
        </member>
        <member name="P:FreeSql.IAdo.MasterPool">
            <summary>
            主库连接池
            </summary>
        </member>
        <member name="P:FreeSql.IAdo.SlavePools">
            <summary>
            从库连接池
            </summary>
        </member>
        <member name="P:FreeSql.IAdo.AopCommandExecuting">
            <summary>
            监视数据库命令对象(执行前，调试)
            </summary>
        </member>
        <member name="P:FreeSql.IAdo.AopCommandExecuted">
            <summary>
            监视数据库命令对象(执行后，用于监视执行性能)
            </summary>
        </member>
        <member name="P:FreeSql.IAdo.DataType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="M:FreeSql.IAdo.Transaction(System.Action)">
            <summary>
            开启事务（不支持异步），60秒未执行完将自动提交
            </summary>
            <param name="handler">事务体 () => {}</param>
        </member>
        <member name="M:FreeSql.IAdo.Transaction(System.Action,System.TimeSpan)">
            <summary>
            开启事务（不支持异步）
            </summary>
            <param name="handler">事务体 () => {}</param>
            <param name="timeout">超时，未执行完将自动提交</param>
        </member>
        <member name="P:FreeSql.IAdo.TransactionCurrentThread">
            <summary>
            当前线程的事务
            </summary>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteReader(System.Action{System.Data.Common.DbDataReader},System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询，若使用读写分离，查询【从库】条件cmdText.StartsWith("SELECT ")，否则查询【主库】
            </summary>
            <param name="readerHander"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteReader(System.Action{System.Data.Common.DbDataReader},System.String,System.Object)">
            <summary>
            查询，ExecuteReader(dr => {}, "select * from user where age > @age", new { age = 25 })
            </summary>
            <param name="cmdText"></param>
            <param name="parms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteArray(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteArray(System.String,System.Object)">
            <summary>
            查询，ExecuteArray("select * from user where age > @age", new { age = 25 })
            </summary>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteDataSet(System.String,System.Object)">
            <summary>
            查询，ExecuteDataSet("select * from user where age > @age; select 2", new { age = 25 })
            </summary>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteDataTable(System.String,System.Object)">
            <summary>
            查询，ExecuteDataTable("select * from user where age > @age", new { age = 25 })
            </summary>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            在【主库】执行
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteNonQuery(System.String,System.Object)">
            <summary>
            在【主库】执行，ExecuteNonQuery("delete from user where age > @age", new { age = 25 })
            </summary>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            在【主库】执行
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteScalar(System.String,System.Object)">
            <summary>
            在【主库】执行，ExecuteScalar("select 1 from user where age > @age", new { age = 25 })
            </summary>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.Query``1(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL返回对象集合，Query&lt;User&gt;("select * from user where age > @age", new SqlParameter { ParameterName = "age", Value = 25 })
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.Query``1(System.String,System.Object)">
            <summary>
            执行SQL返回对象集合，Query&lt;User&gt;("select * from user where age > @age", new { age = 25 })
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.Query``2(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL返回对象集合，Query&lt;User&gt;("select * from user where age > @age; select * from address", new SqlParameter { ParameterName = "age", Value = 25 })
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.Query``2(System.String,System.Object)">
            <summary>
            执行SQL返回对象集合，Query&lt;User&gt;("select * from user where age > @age; select * from address", new { age = 25 })
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteReaderAsync(System.Func{System.Data.Common.DbDataReader,System.Threading.Tasks.Task},System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询，若使用读写分离，查询【从库】条件cmdText.StartsWith("SELECT ")，否则查询【主库】
            </summary>
            <param name="readerHander"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteReaderAsync(System.Func{System.Data.Common.DbDataReader,System.Threading.Tasks.Task},System.String,System.Object)">
            <summary>
            查询，ExecuteReaderAsync(dr => {}, "select * from user where age > @age", new { age = 25 })
            </summary>
            <param name="cmdText"></param>
            <param name="parms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteArrayAsync(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteArrayAsync(System.String,System.Object)">
            <summary>
            查询，ExecuteArrayAsync("select * from user where age > @age", new { age = 25 })
            </summary>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteDataSetAsync(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteDataSetAsync(System.String,System.Object)">
            <summary>
            查询，ExecuteDataSetAsync("select * from user where age > @age; select 2", new { age = 25 })
            </summary>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteDataTableAsync(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            查询
            </summary>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteDataTableAsync(System.String,System.Object)">
            <summary>
            查询，ExecuteDataTableAsync("select * from user where age > @age", new { age = 25 })
            </summary>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            在【主库】执行
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteNonQueryAsync(System.String,System.Object)">
            <summary>
            在【主库】执行，ExecuteNonQueryAsync("delete from user where age > @age", new { age = 25 })
            </summary>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteScalarAsync(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            在【主库】执行
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
        </member>
        <member name="M:FreeSql.IAdo.ExecuteScalarAsync(System.String,System.Object)">
            <summary>
            在【主库】执行，ExecuteScalarAsync("select 1 from user where age > @age", new { age = 25 })
            </summary>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.QueryAsync``1(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL返回对象集合，QueryAsync&lt;User&gt;("select * from user where age > @age", new SqlParameter { ParameterName = "age", Value = 25 })
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.QueryAsync``1(System.String,System.Object)">
            <summary>
            执行SQL返回对象集合，QueryAsync&lt;User&gt;("select * from user where age > @age", new { age = 25 })
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.QueryAsync``2(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL返回对象集合，Query&lt;User&gt;("select * from user where age > @age; select * from address", new SqlParameter { ParameterName = "age", Value = 25 })
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IAdo.QueryAsync``2(System.String,System.Object)">
            <summary>
            执行SQL返回对象集合，Query&lt;User&gt;("select * from user where age > @age; select * from address", new { age = 25 })
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="cmdText"></param>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="P:FreeSql.IAop.ToList">
            <summary>
            监控 ToList 返回的的数据，用于拦截重新装饰
            </summary>
        </member>
        <member name="P:FreeSql.IAop.Where">
            <summary>
            监视 Where，包括 select/update/delete，可控制使上层不被执行。
            </summary>
        </member>
        <member name="P:FreeSql.IAop.ParseExpression">
            <summary>
            可自定义解析表达式
            </summary>
        </member>
        <member name="P:FreeSql.IAop.ConfigEntity">
            <summary>
            自定义实体的配置，方便和多个 ORM 共同使用
            </summary>
        </member>
        <member name="P:FreeSql.IAop.ConfigEntityProperty">
            <summary>
            自定义实体的属性配置，方便和多个 ORM 共同使用
            </summary>
        </member>
        <member name="P:FreeSql.IAop.CurdBefore">
            <summary>
            增删查改，执行命令之前触发
            </summary>
        </member>
        <member name="P:FreeSql.IAop.CurdAfter">
            <summary>
            增删查改，执行命令完成后触发
            </summary>
        </member>
        <member name="P:FreeSql.IAop.SyncStructureBefore">
            <summary>
            CodeFirst迁移，执行之前触发
            </summary>
        </member>
        <member name="P:FreeSql.IAop.SyncStructureAfter">
            <summary>
            CodeFirst迁移，执行完成触发
            </summary>
        </member>
        <member name="P:FreeSql.Aop.ToListEventArgs.List">
            <summary>
            可重新装饰的引用数据
            </summary>
        </member>
        <member name="P:FreeSql.Aop.WhereEventArgs.IsCancel">
            <summary>
            可使上层不被执行这个条件
            </summary>
        </member>
        <member name="P:FreeSql.Aop.ParseExpressionEventArgs.FreeParse">
            <summary>
            内置解析功能，可辅助您进行解析
            </summary>
        </member>
        <member name="P:FreeSql.Aop.ParseExpressionEventArgs.Expression">
            <summary>
            需要您解析的表达式
            </summary>
        </member>
        <member name="P:FreeSql.Aop.ParseExpressionEventArgs.Result">
            <summary>
            解析后的内容
            </summary>
        </member>
        <member name="P:FreeSql.Aop.ConfigEntityEventArgs.EntityType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:FreeSql.Aop.ConfigEntityEventArgs.ModifyResult">
            <summary>
            实体配置
            </summary>
        </member>
        <member name="P:FreeSql.Aop.ConfigEntityPropertyEventArgs.EntityType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:FreeSql.Aop.ConfigEntityPropertyEventArgs.Property">
            <summary>
            实体的属性
            </summary>
        </member>
        <member name="P:FreeSql.Aop.ConfigEntityPropertyEventArgs.ModifyResult">
            <summary>
            实体的属性配置
            </summary>
        </member>
        <member name="P:FreeSql.Aop.CurdBeforeEventArgs.Identifier">
            <summary>
            标识符，可将 CurdBefore 与 CurdAfter 进行匹配
            </summary>
        </member>
        <member name="P:FreeSql.Aop.CurdBeforeEventArgs.CurdType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="P:FreeSql.Aop.CurdBeforeEventArgs.EntityType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:FreeSql.Aop.CurdBeforeEventArgs.Sql">
            <summary>
            执行的 SQL
            </summary>
        </member>
        <member name="P:FreeSql.Aop.CurdBeforeEventArgs.DbParms">
            <summary>
            参数化命令
            </summary>
        </member>
        <member name="P:FreeSql.Aop.CurdAfterEventArgs.Exception">
            <summary>
            发生的错误
            </summary>
        </member>
        <member name="P:FreeSql.Aop.CurdAfterEventArgs.ExecuteResult">
            <summary>
            执行SQL命令，返回的结果
            </summary>
        </member>
        <member name="P:FreeSql.Aop.CurdAfterEventArgs.ElapsedTicks">
            <summary>
            耗时（单位：Ticks）
            </summary>
        </member>
        <member name="P:FreeSql.Aop.CurdAfterEventArgs.ElapsedMilliseconds">
            <summary>
            耗时（单位：毫秒）
            </summary>
        </member>
        <member name="P:FreeSql.Aop.SyncStructureBeforeEventArgs.Identifier">
            <summary>
            标识符，可将 SyncStructureBeforeEventArgs 与 SyncStructureAfterEventArgs 进行匹配
            </summary>
        </member>
        <member name="P:FreeSql.Aop.SyncStructureBeforeEventArgs.EntityTypes">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:FreeSql.Aop.SyncStructureAfterEventArgs.Sql">
            <summary>
            执行的 SQL
            </summary>
        </member>
        <member name="P:FreeSql.Aop.SyncStructureAfterEventArgs.Exception">
            <summary>
            发生的错误
            </summary>
        </member>
        <member name="P:FreeSql.Aop.SyncStructureAfterEventArgs.ElapsedTicks">
            <summary>
            耗时（单位：Ticks）
            </summary>
        </member>
        <member name="P:FreeSql.Aop.SyncStructureAfterEventArgs.ElapsedMilliseconds">
            <summary>
            耗时（单位：毫秒）
            </summary>
        </member>
        <member name="P:FreeSql.ICodeFirst.IsAutoSyncStructure">
            <summary>
            【开发环境必备】自动同步实体结构到数据库，程序运行中检查实体表是否存在，然后创建或修改
            </summary>
        </member>
        <member name="P:FreeSql.ICodeFirst.IsSyncStructureToLower">
            <summary>
            转小写同步结构
            </summary>
        </member>
        <member name="P:FreeSql.ICodeFirst.IsSyncStructureToUpper">
            <summary>
            转大写同步结构
            </summary>
        </member>
        <member name="P:FreeSql.ICodeFirst.IsConfigEntityFromDbFirst">
            <summary>
            使用数据库的主键和自增，适用 DbFirst 模式，无须在实体类型上设置 [Column(IsPrimary)] 或者 ConfigEntity。此功能目前可用于 mysql/sqlserver/postgresql。
            </summary>
        </member>
        <member name="P:FreeSql.ICodeFirst.IsNoneCommandParameter">
            <summary>
            不使用命令参数化执行，针对 Insert/Update
            </summary>
        </member>
        <member name="P:FreeSql.ICodeFirst.IsLazyLoading">
            <summary>
            延时加载导航属性对象，导航属性需要声明 virtual
            </summary>
        </member>
        <member name="M:FreeSql.ICodeFirst.GetComparisonDDLStatements``1">
            <summary>
            将实体类型与数据库对比，返回DDL语句
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ICodeFirst.GetComparisonDDLStatements(System.Type[])">
            <summary>
            将实体类型集合与数据库对比，返回DDL语句
            </summary>
            <param name="entityTypes"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ICodeFirst.SyncStructure``1">
            <summary>
            同步实体类型到数据库
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ICodeFirst.SyncStructure(System.Type[])">
            <summary>
            同步实体类型集合到数据库
            </summary>
            <param name="entityTypes"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ICodeFirst.GetDbInfo(System.Type)">
            <summary>
            根据 System.Type 获取数据库信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ICodeFirst.ConfigEntity``1(System.Action{FreeSql.DataAnnotations.TableFluent{``0}})">
            <summary>
            在外部配置实体的特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ICodeFirst.ConfigEntity(System.Type,System.Action{FreeSql.DataAnnotations.TableFluent})">
            <summary>
            在外部配置实体的特性
            </summary>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.ICodeFirst.GetConfigEntity(System.Type)">
            <summary>
            获取在外部配置实体的特性
            </summary>
            <param name="type"></param>
            <returns>未使用ConfigEntity配置时，返回null</returns>
        </member>
        <member name="M:FreeSql.ICodeFirst.GetTableByEntity(System.Type)">
            <summary>
            获取实体类核心配置
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDbFirst.GetDatabases">
            <summary>
            获取所有数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDbFirst.GetTablesByDatabase(System.String[])">
            <summary>
            获取指定数据库的表信息，包括表、列详情、主键、唯一键、索引、外键、备注
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDbFirst.GetDbType(FreeSql.DatabaseModel.DbColumnInfo)">
            <summary>
            获取数据库枚举类型int值
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDbFirst.GetCsConvert(FreeSql.DatabaseModel.DbColumnInfo)">
            <summary>
            获取c#转换，(int)、(long)
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDbFirst.GetCsTypeValue(FreeSql.DatabaseModel.DbColumnInfo)">
            <summary>
            获取c#值
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDbFirst.GetCsType(FreeSql.DatabaseModel.DbColumnInfo)">
            <summary>
            获取c#类型，int、long
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDbFirst.GetCsTypeInfo(FreeSql.DatabaseModel.DbColumnInfo)">
            <summary>
            获取c#类型对象
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDbFirst.GetDataReaderMethod(FreeSql.DatabaseModel.DbColumnInfo)">
            <summary>
            获取ado.net读取方法, GetBoolean、GetInt64
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDbFirst.GetCsStringify(FreeSql.DatabaseModel.DbColumnInfo)">
            <summary>
            序列化
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDbFirst.GetCsParse(FreeSql.DatabaseModel.DbColumnInfo)">
            <summary>
            反序列化
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.IDbFirst.GetEnumsByDatabase(System.String[])">
            <summary>
            获取数据库枚举类型，适用 PostgreSQL
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.Internal.CommonUtils.GetProperyCommentBySummary(System.Type)">
            <summary>
            通过属性的注释文本，通过 xml 读取
            </summary>
            <param name="type"></param>
            <returns>Dict：key=属性名，value=注释</returns>
        </member>
        <member name="P:FreeSql.Internal.Model.TableRef.RefMiddleEntityType">
            <summary>
            中间表，多对多
            </summary>
        </member>
        <member name="F:FreeSql.Internal.StringConvertType.None">
            <summary>
            不进行任何处理
            </summary>
        </member>
        <member name="F:FreeSql.Internal.StringConvertType.PascalCaseToUnderscore">
            <summary>
            将帕斯卡命名字符串转换为下划线分隔字符串
            <para></para>
            BigApple -> Big_Apple
            </summary>
        </member>
        <member name="F:FreeSql.Internal.StringConvertType.PascalCaseToUnderscoreWithUpper">
            <summary>
            将帕斯卡命名字符串转换为下划线分隔字符串，且转换为全大写
            <para></para>
            BigApple -> BIG_APPLE
            </summary>
        </member>
        <member name="F:FreeSql.Internal.StringConvertType.PascalCaseToUnderscoreWithLower">
            <summary>
            将帕斯卡命名字符串转换为下划线分隔字符串，且转换为全小写
            <para></para>
            BigApple -> big_apple
            </summary>
        </member>
        <member name="F:FreeSql.Internal.StringConvertType.Upper">
            <summary>
            将字符串转换为大写
            <para></para>
            BigApple -> BIGAPPLE
            </summary>
        </member>
        <member name="F:FreeSql.Internal.StringConvertType.Lower">
            <summary>
            将字符串转换为小写
            <para></para>
            BigApple -> bigapple
            </summary>
        </member>
        <member name="M:FreeSql.Internal.StringUtils.PascalCaseToUnderScore(System.String)">
            <summary>
            将帕斯卡命名字符串转换为下划线分隔字符串
            <para></para>
            BigApple -> Big_Apple
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSqlGlobalExtensions.Distance(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            测量两个经纬度的距离，返回单位：米
            </summary>
            <param name="that">经纬坐标1</param>
            <param name="point">经纬坐标2</param>
            <returns>返回距离（单位：米）</returns>
        </member>
        <member name="M:FreeSqlGlobalExtensions.AsSelect``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将 IEnumable&lt;T&gt; 转成 ISelect&lt;T&gt;，以便使用 FreeSql 的查询功能。此方法用于 Lambad 表达式中，快速进行集合导航的查询。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSqlGlobalExtensions.Select``2(IFreeSql)">
            <summary>
            多表查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSqlGlobalExtensions.Select``3(IFreeSql)">
            <summary>
            多表查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSqlGlobalExtensions.Select``4(IFreeSql)">
            <summary>
            多表查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSqlGlobalExtensions.Select``5(IFreeSql)">
            <summary>
            多表查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSqlGlobalExtensions.Select``6(IFreeSql)">
            <summary>
            多表查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSqlGlobalExtensions.Select``7(IFreeSql)">
            <summary>
            多表查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSqlGlobalExtensions.Select``8(IFreeSql)">
            <summary>
            多表查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSqlGlobalExtensions.Select``9(IFreeSql)">
            <summary>
            多表查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreeSqlGlobalExtensions.Select``10(IFreeSql)">
            <summary>
            多表查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用 and 拼接两个 lambda 表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用 and 拼接两个 lambda 表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exp1"></param>
            <param name="condition">true 时生效</param>
            <param name="exp2"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用 or 拼接两个 lambda 表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用 or 拼接两个 lambda 表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exp1"></param>
            <param name="condition">true 时生效</param>
            <param name="exp2"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpressionExtensions.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            将 lambda 表达式取反
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exp"></param>
            <param name="condition">true 时生效</param>
            <returns></returns>
        </member>
        <member name="M:FreeUtil.NewMongodbId">
            <summary>
            生成类似Mongodb的ObjectId有序、不重复Guid
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFreeSql.Insert``1">
            <summary>
            插入数据
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFreeSql.Insert``1(``0)">
            <summary>
            插入数据，传入实体
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:IFreeSql.Insert``1(``0[])">
            <summary>
            插入数据，传入实体数组
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:IFreeSql.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            插入数据，传入实体集合
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:IFreeSql.Update``1">
            <summary>
            修改数据
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFreeSql.Update``1(System.Object)">
            <summary>
            修改数据，传入动态对象如：主键值 | new[]{主键值1,主键值2} | TEntity1 | new[]{TEntity1,TEntity2} | new{id=1}
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="dywhere">主键值、主键值集合、实体、实体集合、匿名对象、匿名对象集合</param>
            <returns></returns>
        </member>
        <member name="M:IFreeSql.Select``1">
            <summary>
            查询数据
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFreeSql.Select``1(System.Object)">
            <summary>
            查询数据，传入动态对象如：主键值 | new[]{主键值1,主键值2} | TEntity1 | new[]{TEntity1,TEntity2} | new{id=1}
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="dywhere">主键值、主键值集合、实体、实体集合、匿名对象、匿名对象集合</param>
            <returns></returns>
        </member>
        <member name="M:IFreeSql.Delete``1">
            <summary>
            删除数据
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFreeSql.Delete``1(System.Object)">
            <summary>
            删除数据，传入动态对象如：主键值 | new[]{主键值1,主键值2} | TEntity1 | new[]{TEntity1,TEntity2} | new{id=1}
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="dywhere">主键值、主键值集合、实体、实体集合、匿名对象、匿名对象集合</param>
            <returns></returns>
        </member>
        <member name="M:IFreeSql.Transaction(System.Action)">
            <summary>
            开启事务（不支持异步），60秒未执行完将自动提交
            </summary>
            <param name="handler">事务体 () => {}</param>
        </member>
        <member name="M:IFreeSql.Transaction(System.Action,System.TimeSpan)">
            <summary>
            开启事务（不支持异步）
            </summary>
            <param name="handler">事务体 () => {}</param>
            <param name="timeout">超时，未执行完将自动提交</param>
        </member>
        <member name="P:IFreeSql.Ado">
            <summary>
            数据库访问对象
            </summary>
        </member>
        <member name="P:IFreeSql.Aop">
            <summary>
            所有拦截方法都在这里
            </summary>
        </member>
        <member name="P:IFreeSql.CodeFirst">
            <summary>
            CodeFirst 模式开发相关方法
            </summary>
        </member>
        <member name="P:IFreeSql.DbFirst">
            <summary>
            DbFirst 模式开发相关方法
            </summary>
        </member>
    </members>
</doc>
